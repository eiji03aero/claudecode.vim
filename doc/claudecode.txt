*claudecode.txt*    Vim plugin for Claude Code CLI integration

Author:  Claude Code
License: MIT
Version: 1.0.0

INTRODUCTION                                    *claudecode*

claudecode.vim is a Vim plugin that integrates Claude Code CLI with Vim,
providing seamless interaction between the editor and Claude's AI capabilities.

The plugin enables real-time context sharing between Vim and Claude through
a terminal-based interface, supporting file operations and diff viewing.

REQUIREMENTS                                    *claudecode-requirements*

Required dependencies:
- Claude Code CLI (must be installed and available in PATH)
- tpope/vim-fugitive (for diff functionality)
- Vim 7.0+ (terminal features require Vim 8.0+)

COMMANDS                                        *claudecode-commands*

                                                *:ClaudeCode*
:ClaudeCode [args]      Launch Claude Code CLI in a split terminal.
                        Reuses existing terminal if Claude Code is already
                        running. Accepts arguments that are passed directly
                        to Claude CLI.

                        Examples:
                        :ClaudeCode
                        :ClaudeCode --resume
                        :ClaudeCode "help me debug this"

                                                *:ClaudeCodeQuit*
:ClaudeCodeQuit         Close/quit the Claude terminal. Terminates the
                        Claude Code CLI session and closes the terminal split.

FUNCTIONS                                       *claudecode-functions*

                                                *ClaudeCodeSendSelection()*
ClaudeCodeSendSelection()
                        Send selected text to Claude with filename and line
                        number context. Should be called in visual mode to
                        send currently selected text.

                        Context format: @filename.ext#L20-25
                        Automatically switches focus to Claude terminal after
                        sending.

                                                *ClaudeCodeSendBuffer()*
ClaudeCodeSendBuffer()
                        Send current buffer to Claude using @ notation with
                        file path. Should be called in normal mode to send
                        entire current buffer.

                        Context format: @filename.ext (relative path from
                        working directory)
                        Automatically switches focus to Claude terminal after
                        sending.

CONFIGURATION                                   *claudecode-configuration*

                                                *g:claudecode_terminal_position*
g:claudecode_terminal_position
                        Controls where the Claude terminal split appears.
                        Values: "bottom" or "right"
                        Default: "right"

                                                *g:claudecode_terminal_width*
g:claudecode_terminal_width
                        Width in characters when terminal position is "right".
                        Type: Number
                        Default: 40

                                                *g:claudecode_terminal_height*
g:claudecode_terminal_height
                        Height in characters when terminal position is "bottom".
                        Type: Number
                        Default: 40

USAGE EXAMPLES                                  *claudecode-examples*

Basic usage:
>
    " Launch Claude Code
    :ClaudeCode

    " Send current buffer to Claude
    :call ClaudeCodeSendBuffer()

    " In visual mode, send selection to Claude
    :'<,'>call ClaudeCodeSendSelection()

    " Launch with specific arguments
    :ClaudeCode --resume

    " Close Claude terminal
    :ClaudeCodeQuit
<

Configuration example:
>
    " Place terminal at bottom with custom height
    let g:claudecode_terminal_position = 'bottom'
    let g:claudecode_terminal_height = 20

    " Place terminal on right with custom width
    let g:claudecode_terminal_position = 'right'
    let g:claudecode_terminal_width = 60
<

Key mapping examples:
>
    " Map leader commands for convenience
    nnoremap <leader>cc :ClaudeCode<CR>
    nnoremap <leader>cb :call ClaudeCodeSendBuffer()<CR>
    vnoremap <leader>cs :call ClaudeCodeSendSelection()<CR>
    nnoremap <leader>cq :ClaudeCodeQuit<CR>
<

FEATURES                                        *claudecode-features*

Context Sharing~
- Send selected text or entire buffer to Claude
- Use relative file paths from working directory
- Automatic context formatting with line numbers for selections

Diff Integration~
- Automatically detect when Claude Code shows diffs
- Open vim-fugitive diff buffer in new tab
- No manual commands required for diff viewing

Terminal Management~
- Terminal is not persistent across Vim sessions
- Automatically restart Claude CLI if process crashes
- Reuse existing terminal session when possible

TROUBLESHOOTING                                 *claudecode-troubleshooting*

Claude CLI not found~
Ensure Claude CLI is installed and available in your PATH:
>
    $ which claude
    $ claude --version
<

vim-fugitive not available~
Install tpope/vim-fugitive plugin:
>
    " Using vim-plug
    Plug 'tpope/vim-fugitive'

    " Using Vundle
    Plugin 'tpope/vim-fugitive'
<

Terminal not opening~
For Vim versions before 8.0, terminal features are limited. Consider
upgrading to Vim 8.0+ or using an alternative terminal multiplexer.

Diff not showing~
Ensure vim-fugitive is properly installed and the file is under git version
control.

LIMITATIONS                                     *claudecode-limitations*

- Vim only (no Neovim support required)
- No language-specific features
- No authentication requirements  
- No default key mappings provided
- No visual feedback for context sending
- No customizable leader key mapping prefix

ABOUT                                           *claudecode-about*

claudecode.vim was created to bridge the gap between Vim's powerful editing
capabilities and Claude's AI assistance, providing a seamless workflow for
developers who prefer to work within Vim.

Report bugs and contribute at:
https://github.com/your-repo/claudecode.vim

vim:tw=78:ts=8:ft=help:norl: